// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package handler

import (
	"context"
	"github.com/iinuma0710/react-go-blog/backend/entity"
	"sync"
)

// Ensure, that ListArticlesServiceMock does implement ListArticlesService.
// If this is not the case, regenerate this file with moq.
var _ ListArticlesService = &ListArticlesServiceMock{}

// ListArticlesServiceMock is a mock implementation of ListArticlesService.
//
//	func TestSomethingThatUsesListArticlesService(t *testing.T) {
//
//		// make and configure a mocked ListArticlesService
//		mockedListArticlesService := &ListArticlesServiceMock{
//			ListArticlesFunc: func(ctx context.Context) (entity.Articles, error) {
//				panic("mock out the ListArticles method")
//			},
//		}
//
//		// use mockedListArticlesService in code that requires ListArticlesService
//		// and then make assertions.
//
//	}
type ListArticlesServiceMock struct {
	// ListArticlesFunc mocks the ListArticles method.
	ListArticlesFunc func(ctx context.Context) (entity.Articles, error)

	// calls tracks calls to the methods.
	calls struct {
		// ListArticles holds details about calls to the ListArticles method.
		ListArticles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockListArticles sync.RWMutex
}

// ListArticles calls ListArticlesFunc.
func (mock *ListArticlesServiceMock) ListArticles(ctx context.Context) (entity.Articles, error) {
	if mock.ListArticlesFunc == nil {
		panic("ListArticlesServiceMock.ListArticlesFunc: method is nil but ListArticlesService.ListArticles was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockListArticles.Lock()
	mock.calls.ListArticles = append(mock.calls.ListArticles, callInfo)
	mock.lockListArticles.Unlock()
	return mock.ListArticlesFunc(ctx)
}

// ListArticlesCalls gets all the calls that were made to ListArticles.
// Check the length with:
//
//	len(mockedListArticlesService.ListArticlesCalls())
func (mock *ListArticlesServiceMock) ListArticlesCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockListArticles.RLock()
	calls = mock.calls.ListArticles
	mock.lockListArticles.RUnlock()
	return calls
}

// Ensure, that AddArticleServiceMock does implement AddArticleService.
// If this is not the case, regenerate this file with moq.
var _ AddArticleService = &AddArticleServiceMock{}

// AddArticleServiceMock is a mock implementation of AddArticleService.
//
//	func TestSomethingThatUsesAddArticleService(t *testing.T) {
//
//		// make and configure a mocked AddArticleService
//		mockedAddArticleService := &AddArticleServiceMock{
//			AddArticleFunc: func(ctx context.Context, title string) (*entity.Article, error) {
//				panic("mock out the AddArticle method")
//			},
//		}
//
//		// use mockedAddArticleService in code that requires AddArticleService
//		// and then make assertions.
//
//	}
type AddArticleServiceMock struct {
	// AddArticleFunc mocks the AddArticle method.
	AddArticleFunc func(ctx context.Context, title string) (*entity.Article, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddArticle holds details about calls to the AddArticle method.
		AddArticle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Title is the title argument value.
			Title string
		}
	}
	lockAddArticle sync.RWMutex
}

// AddArticle calls AddArticleFunc.
func (mock *AddArticleServiceMock) AddArticle(ctx context.Context, title string) (*entity.Article, error) {
	if mock.AddArticleFunc == nil {
		panic("AddArticleServiceMock.AddArticleFunc: method is nil but AddArticleService.AddArticle was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Title string
	}{
		Ctx:   ctx,
		Title: title,
	}
	mock.lockAddArticle.Lock()
	mock.calls.AddArticle = append(mock.calls.AddArticle, callInfo)
	mock.lockAddArticle.Unlock()
	return mock.AddArticleFunc(ctx, title)
}

// AddArticleCalls gets all the calls that were made to AddArticle.
// Check the length with:
//
//	len(mockedAddArticleService.AddArticleCalls())
func (mock *AddArticleServiceMock) AddArticleCalls() []struct {
	Ctx   context.Context
	Title string
} {
	var calls []struct {
		Ctx   context.Context
		Title string
	}
	mock.lockAddArticle.RLock()
	calls = mock.calls.AddArticle
	mock.lockAddArticle.RUnlock()
	return calls
}
